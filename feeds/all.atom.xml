<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>development blog</title><link href="http://youske.github.io/" rel="alternate"></link><link href="http://youske.github.io/feeds/all.atom.xml" rel="self"></link><id>http://youske.github.io/</id><updated>2014-05-24T16:30:00+09:00</updated><entry><title>codeanywhereについて</title><link href="http://youske.github.io/codeanywherereview.html" rel="alternate"></link><updated>2014-05-24T16:30:00+09:00</updated><author><name>youske</name></author><id>tag:youske.github.io,2014-05-24:codeanywherereview.html</id><summary type="html">&lt;h1&gt;概要&lt;/h1&gt;
&lt;p&gt;codeanywhereはcloudエディタで
リモート側の仮想ドライブsandboxにファイルを配置し編集する事ができる。
そのようなことから、別のマシンからそのファイルへの読み書きを行うことができ、
ウェブから、iOS,Androidからでもアクセスできる。かなり意欲的なウェブサービス
sandbox以外のクラウドサービス dropbox github
ftp,sftpでの接続もでき、有料サービスではssh接続もできるという。
どんなにすごいか試してみた。&lt;/p&gt;
&lt;h1&gt;レビュー&lt;/h1&gt;
&lt;p&gt;とりあえずお題目上アカウントを作成して、ファイルを配置、編集ひと通りの操作はできた。
別の端末からのアクセスも実施 （Android版は何故かユーザログインすらできないので利用していない。）
＊古いバージョンと新しいバージョンでアプリが異なるものが配布されているようなので新しいバージョンのアプリにすれば解決される。&lt;/p&gt;
&lt;p&gt;sandboxの利用（無料枠では5MBのストレージ）することができる。&lt;/p&gt;
&lt;p&gt;エディタとしては現状では機能が足りていないことが否めない。
コードコンプリート機能があるが、どちらかと言えばキーマクロをつけてほしいな。
全般的に動作は割りと軽いので、あまりストレスを感じることはなさそう。
dropboxのファイルにダイレクトにアクセスして保存できるのは仲な良い。&lt;/p&gt;
&lt;p&gt;sandboxのディスク容量が5MB、有料化しても500MB程度なので、dropbox利用で代替ができてしまう。
HTML,javascriptのコードであればプレビューに使える。&lt;/p&gt;
&lt;h1&gt;まとめ&lt;/h1&gt;
&lt;p&gt;全体として似たようなオンラインエディタサービスはあるが、群を抜いて完成度が高い。
はっきり言えば他のサービスがエディタの機能を有していないことがまず挙げられる。
ただほしいエディタとしての機能がかけているので、個人的には常用は向かない。
といってもchromebookからのアクセス、他のデバイスからのアクセスができるので、利用は多いかもしれない。
無料枠ではdropboxの直接編集のみが売りのようだ sandbox 5MBはほぼいらない。&lt;/p&gt;
&lt;p&gt;パソコンにエディタをインストールして利用するスタイルを完全に覆している為、なかなか良い方向性だと思う。
シンクライアント（厳密にはシンクライアントではないがchromeosの乗ったchromebook)には完全に用途が合致している。
むしろこの分野ではそれしか選択肢が無いとも言える。&lt;/p&gt;
&lt;p&gt;どちらかと言えばこちらよりnitros.IOのほうが利便性が高い。
nitrous.IOはサーバⅠ台をまるごと利用できるのでアドバンテージは高い（git, 他のソフトウェアもインストールできる。）&lt;/p&gt;</summary><category term="codeanywhere"></category><category term="webservice"></category></entry><entry><title>famo.us cdnから読み込んで実行する</title><link href="http://youske.github.io/famousthis.html" rel="alternate"></link><updated>2014-05-22T21:30:00+09:00</updated><author><name>youske</name></author><id>tag:youske.github.io,2014-05-22:famousthis.html</id><summary type="html">&lt;h1&gt;概要&lt;/h1&gt;
&lt;p&gt;famo.us famo.usのcdnを利用したPlunkerで利用できるようにする。&lt;/p&gt;
&lt;h1&gt;設定&lt;/h1&gt;
&lt;p&gt;&lt;head&gt;要素内にて以下のコードを記述
require.jsを利用することでjsファイルが読み込まれると同時に所定の初期化処理が実行される。
どうやらfamo.usではrequire.jsでの読み込み方法を利用している。&lt;/head&gt;&lt;/p&gt;
&lt;h1&gt;plunkerでの実行&lt;/h1&gt;
&lt;p&gt;starter-kitに付属のboilerplateのコードがほとんどそのまま利用できるが
Plukerではフォルダ管理ができないようなので、すべてrootパスに切り替える程度ですむ。&lt;/p&gt;</summary><category term="famo.us"></category></entry><entry><title>Pelican+GithubPagesの運用について</title><link href="http://youske.github.io/pelicangithub.html" rel="alternate"></link><updated>2014-05-22T19:00:00+09:00</updated><author><name>youske</name></author><id>tag:youske.github.io,2014-05-22:pelicangithub.html</id><summary type="html">&lt;h1&gt;概要&lt;/h1&gt;
&lt;p&gt;githubのユーザページはmasterブランチに置かれているファイル(htmlその他)が
表示の対象となっている。
Projectページではgh-pagesというブランチが表示の対象。&lt;/p&gt;
&lt;p&gt;この仕様で問題なのは、直接masterブランチにhtmlなどのファイルを配置する場合
特に問題ないが、静的サイトジェネレータを使って出力した結果をページにしたい場合
ソースファイルの置き場所がマスターブランチとなってしまう。&lt;/p&gt;
&lt;p&gt;この問題について次のような形で解決した。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;親無しブランチ sourceを作成 静的サイトジェネレータのソースを配置&lt;/li&gt;
&lt;li&gt;masterブランチ 静的サイトジェネレータが生成するoutputの内容を配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;なお静的サイトジェネレータはPelicanを使用&lt;/p&gt;
&lt;h2&gt;運用に関するフロー&lt;/h2&gt;
&lt;p&gt;簡単フローとして&lt;/p&gt;
&lt;p&gt;sourceブランチ&lt;/p&gt;</summary><category term="github"></category><category term="pelican"></category><category term="運用"></category></entry><entry><title>Pelicanのテーマを変えてみる。</title><link href="http://youske.github.io/pelicantheme.html" rel="alternate"></link><updated>2014-05-22T17:00:00+09:00</updated><author><name>youske</name></author><id>tag:youske.github.io,2014-05-22:pelicantheme.html</id><summary type="html">&lt;h1&gt;概要&lt;/h1&gt;
&lt;p&gt;既定のテーマでも個人的には問題は無いが、より見やすそうなテーマに変更&lt;/p&gt;
&lt;h1&gt;設定方法&lt;/h1&gt;
&lt;p&gt;pelicanconf.pyに設定項目&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;THEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;'テーマが配置されているローカルディレクトリ'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;として記述makeされるたびにここで指定されているテーマを利用してページが作成される。&lt;/p&gt;
&lt;h1&gt;pelican-themesの取得&lt;/h1&gt;
&lt;p&gt;そこでどこにテーマがあるのかと言うと
https://github.com/getpelican/pelican-themes&lt;/p&gt;
&lt;p&gt;git clone --recursive https://github.com/getpelican/pelican-themes 
- 適当なディレクトリにリポジトリを作る。(pelicanconf.py THEME=に設定できるディレクトリ)&lt;/p&gt;</summary><category term="Pelican"></category><category term="theme"></category></entry><entry><title>github.io Userページを管理する</title><link href="http://youske.github.io/github.iopages.html" rel="alternate"></link><updated>2014-05-22T11:00:00+09:00</updated><author><name>youske</name></author><id>tag:youske.github.io,2014-05-22:github.iopages.html</id><summary type="html">&lt;h1&gt;概要&lt;/h1&gt;
&lt;p&gt;github-pagesには大きく分け２つある。
User向けのページとProject向けのページ
githubのユーザページはmasterブランチに置かれているファイルが(htmlその他)表示の対象となっている。
Projectページではgh-pagesというブランチが表示の対象。&lt;/p&gt;
&lt;p&gt;User ページにおいてこの仕様で問題なのは、直接masterブランチにhtmlなどのファイルを配置する場合
特に問題ないが、静的サイトジェネレータを使って出力した結果をページにしたい場合
ソースファイルの置き場所とジェネレータによって生成されたファイルが混在する。
状況として、ソースと生成物が異なるのはいささか衛生上良くないので分けて運用する。&lt;/p&gt;
&lt;p&gt;リポジトリの配置が問題であるための解決策として次のことを考えた。
1. Userページのリポジトリにはhtmlファイルを配置するが、ソースは別リポジトリ
2. 同一リポジトリ内に別々に管理されるブランチを設定&lt;/p&gt;
&lt;p&gt;１の方法だとかなり面倒であるため、２の方法で解決した。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;親無しブランチsourceを作成 静的サイトジェネレータのソースを配置&lt;/li&gt;
&lt;li&gt;masterブランチ 静的サイトジェネレータが生成するoutputの内容を配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;つまり Userページリポジトリには
master
source
この２つのブランチが存在し、それぞれ異なるファイルを管理するように設定&lt;/p&gt;
&lt;h1&gt;運用に関するフロー&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;sourceブランチにチェックアウト&lt;/li&gt;
&lt;li&gt;同contentsフォルダにてMarkdown形式の投稿を書く&lt;/li&gt;
&lt;li&gt;sourceブランチのルートに戻り make html&lt;/li&gt;
&lt;li&gt;output の確認に make devserver としてローカル確認&lt;/li&gt;
&lt;li&gt;masterブランチにチェックアウト　outputは除外設定としている。&lt;/li&gt;
&lt;li&gt;outputフォルダは存在するので　cp -r output/* ./&lt;/li&gt;
&lt;li&gt;git add -all ; git commit -m "commit message" にて登録&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git push origin master&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;source に再びチェックインし、変更分をcomiit push&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;などなど&lt;/p&gt;</summary><category term="github"></category><category term="pelican"></category></entry><entry><title>Disqusアカウント、コメントを利用する Pelicanのコメント機能</title><link href="http://youske.github.io/pecliandisqus.html" rel="alternate"></link><updated>2014-05-19T18:00:00+09:00</updated><author><name>youske</name></author><id>tag:youske.github.io,2014-05-19:pecliandisqus.html</id><summary type="html">&lt;h1&gt;概要&lt;/h1&gt;
&lt;p&gt;Pelican + GitHubPagesなので動的ページでも無いし、DB接続もないので
コメントの機能を外部サイトにて行う。
PelicanではDisqusに対応しているので利用してみる。&lt;/p&gt;
&lt;h1&gt;Disqusの導入&lt;/h1&gt;
&lt;p&gt;サイトにアクセスしてアカウント作成&lt;/p&gt;
&lt;p&gt;pelicanconf.pyにて
    DISQUS_SITENAME='サイト名'&lt;/p&gt;
&lt;p&gt;ここで言うサイト名はdisqusにて作成したサイトの名前
&lt;xxxxxx&gt;.disqus.com
であるためサイト名はxxxxxxを入れる。&lt;/xxxxxx&gt;&lt;/p&gt;
&lt;h1&gt;導入方法&lt;/h1&gt;
&lt;p&gt;pelicanconf.pyファイルに以下のようにコードを追記&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;plugin1&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;plugin2&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="pelican"></category><category term="Disqus"></category></entry><entry><title>Pelican Plugin</title><link href="http://youske.github.io/peclianplugin.html" rel="alternate"></link><updated>2014-05-19T18:00:00+09:00</updated><author><name>youske</name></author><id>tag:youske.github.io,2014-05-19:peclianplugin.html</id><summary type="html">&lt;h1&gt;概要&lt;/h1&gt;
&lt;p&gt;pelicanでは様々なプラグインがあるようだ。
これらを利用することでpelicanにはなかった機能を保管することができる。&lt;/p&gt;
&lt;p&gt;[https://github.com/getpelican/pelican-plugins]&lt;/p&gt;
&lt;h1&gt;導入方法&lt;/h1&gt;
&lt;p&gt;githubよりcloneする。&lt;/p&gt;
&lt;p&gt;$&amp;gt; git clone https://github.com/getpelican/pelican-plugins
(現在いるディレクトリにコピーが作られるので注意)&lt;/p&gt;
&lt;p&gt;pelicanconf.pyファイルに以下のようにコードを追記&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;PLUGIN_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;plugins&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;
&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;plugin1&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;plugin2&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;PLUGINSには並列で導入したいプラグインのフォルダ名を入れる。&lt;/p&gt;
&lt;h1&gt;プラグインの紹介&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;tipue search
beautifulsoup4が必要となる。
$&amp;gt; pip install bearutifulsoup4&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pelican"></category><category term="plugin"></category></entry><entry><title>テスト投稿</title><link href="http://youske.github.io/fistpost.html" rel="alternate"></link><updated>2014-05-19T09:00:00+09:00</updated><author><name>youske</name></author><id>tag:youske.github.io,2014-05-19:fistpost.html</id><summary type="html">&lt;p&gt;Markdownのテスト&lt;/p&gt;
&lt;h1&gt;見出し1&lt;/h1&gt;
&lt;h2&gt;見出し2&lt;/h2&gt;
&lt;h3&gt;見出し3&lt;/h3&gt;
&lt;h2&gt;引用&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;引用してます。
さらに引用してます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;引用のネスト&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更に深く&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2&gt;リスト&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;赤&lt;/li&gt;
&lt;li&gt;青&lt;/li&gt;
&lt;li&gt;黄色&lt;/li&gt;
&lt;li&gt;緑&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;数字リスト&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;a&lt;/li&gt;
&lt;li&gt;b&lt;/li&gt;
&lt;li&gt;c&lt;/li&gt;
&lt;li&gt;d&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;線&lt;/h2&gt;
&lt;hr/&gt;
&lt;hr/&gt;
&lt;hr/&gt;
&lt;hr/&gt;
&lt;h2&gt;code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;test&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="テスト"></category></entry></feed>